#!/bin/bash

# Lightweight CLI version of vscode markdown preview
#
# Takes a path to a markdown file as argument, transform it to html and
# re-transform it everytime the file is updated

# Check if dependencies are installed
dependencies=("pandoc" "fswatch")
for i in "${dependencies[@]}"; do
    if ! command -v "$i" &> /dev/null; then
        echo "$i needs to be in path!"
        exit 1
    fi
done

invalid_command_msg="Invalid command: md-preview $*"
usage_msg="Usage: md-preview file.md"

# Check if correct argument supplied
if [ $# -ne 1 ]; then
    echo "$invalid_command_msg"
    echo "Error: wrong argument supplied"
    echo "$usage_msg"
    exit 1
fi

# Check if argument is a markdown file
if  [[ ! -f "$1" || ! "$1" =~ \.md$ ]]; then
    echo "$invalid_command_msg"
    echo "Error: $1 is not a markdown file"
    echo "$usage_msg"
    exit 1
fi

# https://github.com/FabrizioMusacchio/GitHub_Flavor_Markdown_CSS
# Replace with own css if needed
gfm_css_file="https://raw.githubusercontent.com/FabrizioMusacchio/GitHub_Flavor_Markdown_CSS/refs/heads/master/GitHub%20Flavor.css"

# Use temporary file for output html and delete it after the script exits
input_file="$1"
tempdir=$(mktemp -d)
trap 'rm -rf "$tempdir"' EXIT
output_file="$tempdir/output.html"

convertToHtml() {
    # Removed pandoc stderr checks for performance
    pandoc --quiet -f gfm -t html -o "$output_file" "$input_file" \
    --embed-resources --standalone --css="$gfm_css_file"
}

# Initial trasnform
convertToHtml
if [[ "$OSTYPE" == "darwin"* ]]; then
    open "$tempdir/output.html"
elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
    xdg-open "$tempdir/output.html"
else
    echo "Unsupported OS for opening the file."
    exit 1
fi

# Transform everytime the markdown file is updated
fswatch -o --event Updated --latency=0.5 "$input_file"| while read -r;
do
    echo "File updated. Rebuilding HTML..."
    convertToHtml
done
